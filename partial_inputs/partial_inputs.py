{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bbec6574",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import numpy as np\n",
    "\n",
    "from tensorflow import keras\n",
    "\n",
    "import tensorflow as tf\n",
    "import random as python_random\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras import Input\n",
    "from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy as sp\n",
    "import pickle\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "\n",
    "from matplotlib.lines import Line2D\n",
    "from matplotlib.patches import Rectangle\n",
    "from matplotlib.patches import Circle\n",
    "from matplotlib.patches import Arrow\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11c978c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import element_counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c7dde0b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('lithium-ion-batteries.csv')\n",
    "\n",
    "lb = LabelBinarizer()\n",
    "lb.fit(df['Crystal System'].values)\n",
    "y_onehot = lb.transform(df['Crystal System'].values)\n",
    "output = pd.DataFrame()\n",
    "for i in df['Formula']:\n",
    "    dictionary = element_counter.element_count(i)\n",
    "    output = output.append(dictionary, ignore_index=True)\n",
    "dataframe = df.join(output)\n",
    "\n",
    "seed = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c4099531",
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_input(parameter):\n",
    "    x = dataframe[[parameter]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def one_parameter():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(11, kernel_initializer='normal', activation='relu'))\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=one_parameter,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    fina_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e93c85df",
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_input(parameter1, parameter2):\n",
    "    x = dataframe[[parameter1, parameter2]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def two_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(17, kernel_initializer='normal', activation='relu'))\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=two_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e13086c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def three_input(parameter1, parameter2, parameter3):\n",
    "    x = dataframe[[parameter1, parameter2, parameter3]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def three_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(11, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(34, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(32, kernel_initializer='normal', activation='relu'))\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=three_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a65384d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def four_input(parameter1, parameter2, parameter3, parameter4):\n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def four_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(11, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(35, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(24, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=four_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6b2fa325",
   "metadata": {},
   "outputs": [],
   "source": [
    "def five_input(parameter1, parameter2, parameter3, parameter4, parameter5):\n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, parameter5]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def five_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(9, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(38, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(32, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(19, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=five_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "80646cf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def six_input(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6):\n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, parameter5, parameter6]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def six_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(6, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(34, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(30, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(35, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=six_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2fd05a95",
   "metadata": {},
   "outputs": [],
   "source": [
    "def seven_input(parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7):\n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def seven_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(12, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(31, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(32, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(28, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=seven_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "480bbaf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eight_input(parameter1, parameter2, parameter3, parameter4, \n",
    "                parameter5, parameter6, parameter7, parameter8):\n",
    "    \n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, \n",
    "                   parameter5, parameter6, parameter7, parameter8]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def eight_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(10, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(29, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(37, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(15, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(21, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=eight_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0cc802f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def nine_input(parameter1, parameter2, parameter3, parameter4, \n",
    "                parameter5, parameter6, parameter7, parameter8, \n",
    "              parameter9):\n",
    "    \n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, \n",
    "                   parameter5, parameter6, parameter7, parameter8, \n",
    "                  parameter9]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def nine_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(11, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(34, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(36, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(21, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(40, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(31, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=nine_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "08a19943",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ten_input(parameter1, parameter2, parameter3, parameter4, \n",
    "                parameter5, parameter6, parameter7, parameter8, \n",
    "              parameter9, parameter10):\n",
    "    \n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, \n",
    "                   parameter5, parameter6, parameter7, parameter8, \n",
    "                  parameter9, parameter10]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def ten_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(16, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(20, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(27, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(42, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(48, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(37, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=ten_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2bf11cab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eleven_input(parameter1, parameter2, parameter3, parameter4, \n",
    "                parameter5, parameter6, parameter7, parameter8, \n",
    "              parameter9, parameter10, parameter11):\n",
    "    \n",
    "    x = dataframe[[parameter1, parameter2, parameter3, parameter4, \n",
    "                   parameter5, parameter6, parameter7, parameter8, \n",
    "                  parameter9, parameter10, parameter11]].values\n",
    "    y = y_onehot\n",
    "    x_train, x_test, y_train, y_test = train_test_split(x, y,\n",
    "                                                    test_size=0.20,\n",
    "                                                    )\n",
    "\n",
    "    scaler = StandardScaler().fit(x_train)\n",
    "    x_train_norm = scaler.transform(x_train)\n",
    "    x_test_norm = scaler.transform(x_test)\n",
    "\n",
    "\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    def eleven_parameters():\n",
    "        model = Sequential()\n",
    "        model.add(Input(shape=x_train_norm.shape[1]))\n",
    "        #hidden layers\n",
    "        model.add(Dense(11, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(23, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(49, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(50, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(46, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(30, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(29, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(27, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(28, kernel_initializer='normal', activation='relu'))\n",
    "        model.add(Dense(23, kernel_initializer='normal', activation='relu'))\n",
    "\n",
    "        #output layer\n",
    "        model.add(Dense(3, kernel_initializer='normal', activation='softmax'))\n",
    "        optimizer = keras.optimizers.Adam(lr=0.01)\n",
    "        model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "    classifier = KerasClassifier(build_fn=eleven_parameters,\n",
    "                          epochs=1000, batch_size=10000, verbose=0)\n",
    "\n",
    "    history = classifier.fit(x_train_norm, y_train, validation_split=0.33, epochs=1000, batch_size=10000,verbose=0)\n",
    "\n",
    "    accuracy = history.history['accuracy']\n",
    "    final_acc = accuracy[-1]\n",
    "    print(final_acc)\n",
    "    pd.DataFrame(history.history).plot(figsize=(8, 5))\n",
    "    plt.grid(True)\n",
    "    plt.gca().set_ylim(0, 1.5)\n",
    "    plt.show()\n",
    "    \n",
    "    return history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46260f01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
